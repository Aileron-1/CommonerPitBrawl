<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>battle = instance_create(0,0,objBattle);
battle.owner = id;

clientID = 0;   
PlayerName = global.PlayerName;  

buff = buffer_create(256, buffer_grow, 1);
client = network_create_socket(global.ServerType);
global.client = client;
global.NetworkState = NETWORK_PLAY;

// Create a list to hold ALL sprites sent from the server
entities = ds_list_create();
entityCount = 0;

// Connect to our server
var err = network_connect(client, global.connectip, 6510);
if( err!=0 ){
    // if we can't connect, show an error and restart... could be more graceful :)
    show_message("Error - can not connect to server!!");
    game_restart();
}

// Client has connected to the server, so send our "player name"
SendName( PlayerName );
alarm[0]=120;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send keep alive "ping" to server
SendKeepAlive();
alarm[0]=120;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Networking code
var eventid = ds_map_find_value(async_load, "id");

// Our socket?
if( client == eventid )
{
    show_debug_message('client received packet')
    
    // Read all data....
    var buff = ds_map_find_value(async_load, "buffer");
    buffer_seek(buff, buffer_seek_start, 0);
    
    // OUR socket ID
    // ---------------------Should really re-arrange this at some point
    clientID = buffer_read(buff,buffer_s16); 
    
    // Get what type of packet this is
    b_type = buffer_read(buff, buffer_s16 ); //if...
    
    // IF it's a entityupdate packet
    if (b_type == 1) {
    
        // Get number of entity sent
        entityCount = buffer_read(buff, buffer_u32 ); 
        
        for(var i = 0; i &lt; entityCount; i++) {
            b_xx = buffer_read(buff,buffer_s16);     //xx
            b_yy = buffer_read(buff,buffer_s16);     //yy
            b_sprite_index = buffer_read(buff,buffer_s16); //sprite_index
            b_image_index = buffer_read(buff,buffer_s16); //image_index   
            b_socketID = buffer_read(buff,buffer_s16); //socketID    
            b_entityID = buffer_read(buff,buffer_s16); //entityID
            b_PlayerName = buffer_read(buff,buffer_string); // player name
            b_moveType = buffer_read(buff,buffer_s16);
            b_init = buffer_read(buff,buffer_s16);
            b_movement = buffer_read(buff,buffer_s16);
            b_action = buffer_read(buff,buffer_s16);
            b_freeAction = buffer_read(buff,buffer_s16);
            b_bonusAction = buffer_read(buff,buffer_s16);
            b_die = buffer_read(buff,buffer_s16);
            b_turn = buffer_read(buff,buffer_s16);
            
            // Check the old list if it exist
            // If it isn't in the list then create and add it
            
            var exists = -1;
            for ( var o = 0; o &lt; ds_list_size(entities); o++ ) {
                if (ds_list_find_value(entities, o).entityID == b_entityID) exists = 1;
            }
            if (exists == -1) {
                show_debug_message("not");
                a = instance_create(0,0,objPlayerClient);
                a.owner = battle.id;  // set owner
                ds_list_add(entities, a);
                
                // If this instance is the player
                if (b_socketID == clientID) {
                    battle.player = a;
                }
            }
            else {
                show_debug_message("already");
            }
            // regardless if it already exists, we'll still update it
            a = ds_list_find_value(entities, i);
            
            a.xx = b_xx;
            a.yy = b_yy;
            a.socketID = b_socketID;
            a.entityID = b_entityID;
            a.playerName = b_PlayerName;
            a.moveType = b_moveType;
            a.initiative = b_init;
            a.movement = b_movement;
            a.action[0] = b_action;
            a.action[1] = b_freeAction;
            a.action[2] = b_bonusAction;
            a.die = b_die;
            if (b_socketID == clientID) {
                battle.turn = b_turn;
            }
        }
    }
    if (b_type == 2) {
        // If it's a ROLL packet
        b_result = buffer_read(buff,buffer_s16);
        b_label = buffer_read(buff,buffer_string);
        with (battle) {
            AnimatedDice(70+irandom(50), 640 + 40, owner.b_result, owner.b_label);
        }
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
