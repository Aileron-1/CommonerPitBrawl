<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>0</persistent>
  <parentName>objPopup</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>headings = ds_list_create();
ds_list_add(headings, 'Actions', 'Bonus Actions', 'Free Actions');

items = 0;//ds_list_create();
itemHeight = 26;
up = false;
width = 300;
height = ds_list_size(items)*itemHeight;

bx1 = x;
by1 = y-height;
bx2 = x+width;
by2 = y;
cbpad = 5;

tpad = 20;
tpadH = 15;

closeTrigger = 0;
selected = -1;

labelProperty = textProperty(fontAction, c_black, 1, fa_left, fa_top);
titleProperty = textProperty(fontUITitle, c_dkgray, 1, fa_center, fa_top);
headerProperty = textProperty(fontSubheading2, c_black, 1, fa_center, fa_top);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>closeTrigger = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Update list
var ac = owner.player.actions;
var bAc = owner.player.bonusActions;
var fAc = owner.player.freeActions;

// Fill with headings and action items
ds_list_clear(items);

// Add list header
ds_list_add(items, '!Take an action');

// Add action heading
ds_list_add(items, '@Actions');
// Add actions
for (var i=0; i&lt;ds_list_size(ac); i++) {
    ds_list_add(items, ac[|i]);
}

// Add bonus action heading
ds_list_add(items, '@Bonus Actions');
// Add actions
for (var i=0; i&lt;ds_list_size(bAc); i++) {
    ds_list_add(items, bAc[|i]);
}

// Add free action heading
ds_list_add(items, '@Free Actions');
// Add actions
for (var i=0; i&lt;ds_list_size(fAc); i++) {
    ds_list_add(items, fAc[|i]);
}

height = ds_list_size(items)*itemHeight;

mouse_v_x = window_view_mouse_get_x(0);
mouse_v_y = window_view_mouse_get_y(0);

if (visible == true) {
    if (point_in_rectangle(mouse_v_x,mouse_v_y,bx2-itemHeight-cbpad,by1+cbpad,bx2-cbpad,by1+cbpad+itemHeight)) {
        if (mouse_check_button_pressed(mb_left)) {
            visible = false;
            alarm[0] = 2;
        }
    }
    for (var i=0; i&lt;ds_list_size(items); i++) {
        if (string_char_at(items[|i], 0) != '!') {
            if (string_char_at(items[|i], 0) != '@') {
                if (point_in_rectangle(mouse_v_x,mouse_v_y,bx1,by1+itemHeight*i,bx2,by1+itemHeight*(i+1))) {
                    selected = i;
                }
            }
        }
    }
    if (point_in_rectangle(mouse_v_x,mouse_v_y,bx1,by1,bx2,by2)) {
        if (mouse_check_button_pressed(mb_left)) {
            owner.clicked = selected;
            visible = false;
            alarm[0] = 2;
        }
    }
}
height = ds_list_size(items)*itemHeight;

// if up
bx1 = x;
by1 = y-height+(height/2);
bx2 = x+width;
by2 = y+(height/2);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw backing
draw_set_color($e0e0eb);
draw_rectangle(bx1,by1-tpadH,bx2,by2+tpadH,0);

// Close button
draw_set_color(c_gray);
draw_rectangle(bx2-itemHeight-cbpad,by1+cbpad,bx2-cbpad,by1+cbpad+itemHeight,0);

// button x
draw_set_color(c_white);
draw_text(bx2-itemHeight/2-cbpad,by1+itemHeight/2+cbpad,"X");

// items
for (var i=0; i&lt;ds_list_size(items); i++) { 
    // Draw item background if not header
    if (string_char_at(items[|i], 0) != '!') {
        if (string_char_at(items[|i], 0) != '@') {
            draw_set_alpha(0.7);
            draw_set_color(c_white);
            var gap = 0;  // temp
            draw_rectangle(bx1+tpad/2,by1+itemHeight*i+gap,bx2-tpad/2,by1+itemHeight*(i+1)-1-gap,0);
            draw_set_alpha(1);
            draw_line(bx1+tpad/2,by1+itemHeight*(i+1)-1-gap,bx2-tpad/2,by1+itemHeight*(i+1)-1-gap);
        }
    }
    // Draw selection rectangle
    if (i == selected) {
        draw_set_color(c_yellow);
        draw_rectangle(bx1+tpad/2,by1+itemHeight*selected,bx2-tpad/2,by1+itemHeight*(selected+1),0);
    }
    
    // Draw item text
    SetTextProperty(labelProperty);
    var iOffset = 0;  // Vertical offset for smaller items
    var midOffset = 0;  // For drawing in the middle
    var drawStr = items[| i];  // Redundancy
    if (is_string(drawStr)) {
        if (string_char_at(items[|i], 0) == '!') {
            drawStr = string_delete(items[| i], 1,1);
            midOffset = width/2 - tpad;
            SetTextProperty(titleProperty);
        }
        if (string_char_at(items[|i], 0) == '@') {
            drawStr = string_delete(items[| i], 1,1);
            midOffset = width/2 - tpad;
            iOffset = 7;
            SetTextProperty(headerProperty);
        }
        draw_text(bx1+tpad+midOffset, by1+itemHeight*i+iOffset, drawStr);
    }
}

// border
draw_set_color(c_black);
draw_rectangle(bx1,by1-tpadH,bx2,by2+tpadH,1);




</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
