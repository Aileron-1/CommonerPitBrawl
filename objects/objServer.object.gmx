<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.entityCount = 0;
global.haveserver = true;

//broadcast_buffer = buffer_create(32, buffer_fixed, 1);
player_buffer = buffer_create(16384, buffer_fixed, 1);
Clients = ds_map_create();
socketlist = ds_list_create();

// Try and create the actual server
server = network_create_server(global.ServerType, 6510, 8 );
if (server &lt; 0) {    
    // If theres already a server running, shut down and delete.
    global.haveserver = false;
    ds_map_destroy(Clients);
    ds_list_destroy(socketlist);
    //buffer_delete(broadcast_buffer);
    buffer_delete(player_buffer);
    instance_destroy();
}

// Server stuff
regular_send = 0;  // Timer for sending regular updates

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send player data to ALL attached clients

// Once a frame, we send ALL attached clients, ALL game sprites (plaeyrs and baddies)
regular_send += 1;
var count = ds_list_size(socketlist);
if (regular_send == 2*room_speed) {
    if( count&gt;0 )
    {
        // Regular position updates
        global.player_buffer = player_buffer;
        
        // Reset buffer to start - Networking ALWAYS reads from the START of the buffer
        buffer_seek(player_buffer, buffer_seek_start, 0);
        
        // Total number of entity
        buffer_write(player_buffer, buffer_u32, global.entityCount );
    
        // Dummy player x,y...will fill in later. This allows the client to follow themselves in a scrolling level.
        buffer_write(global.player_buffer, buffer_s16, 0 );
        buffer_write(global.player_buffer, buffer_s16, 0 );
    
        // All attached players
        with(objEntity)
        {
            buffer_write(global.player_buffer, buffer_s16, x );
            buffer_write(global.player_buffer, buffer_s16, y );
            buffer_write(global.player_buffer, buffer_s16, sprite_index );
            buffer_write(global.player_buffer, buffer_s16, image_index );
            buffer_write(global.player_buffer, buffer_string, PlayerName );
        }
        
        var buffer_size = buffer_tell(player_buffer);
            
        // Now send all data... to all clients
        for(i=0;i&lt;count;i++)
        {   
            // get the socket
            var sock = ds_list_find_value(socketlist,i);
    
            // Write in client location, so it can do a scroll window "follow"
            buffer_seek(player_buffer, buffer_seek_start, 4);
    
            // Get the player's instance, so we can get it's X,Y
            var inst = ds_map_find_value( Clients, sock);
            buffer_write(global.player_buffer, buffer_s16, inst.x );
            buffer_write(global.player_buffer, buffer_s16, inst.y );
    
            // Send data to client
            network_send_packet( sock,player_buffer, buffer_size );
        }
    }
    regular_send = 0;
}    




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Server network control
var eventid = ds_map_find_value(async_load, "id");

if( server == eventid ){
    // If the socket ID is the server one, then we have a new 
    /// client connecting, OR an old client disconnecting
    ConnectDisconnectClient();
}else if( eventid==global.client){
    // Do nothing if this is for our "local" client
}else{
    // All other sockets are connected client sockets, and we have recieved commands from them.
    ServerRecievedData();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
