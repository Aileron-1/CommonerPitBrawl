<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.entityCount = 0;
global.haveserver = true;

//broadcast_buffer = buffer_create(32, buffer_fixed, 1);
player_buffer = buffer_create(16384, buffer_fixed, 1);
Clients = ds_map_create();
socketlist = ds_list_create();
count = 0;

// Try and create the actual server
server = network_create_server(global.ServerType, 6510, 8 );
if (server &lt; 0) {    
    // If theres already a server running, shut down and delete.
    global.haveserver = false;
    ds_map_destroy(Clients);
    ds_list_destroy(socketlist);
    //buffer_delete(broadcast_buffer);
    buffer_delete(player_buffer);
    instance_destroy();
}

// Server stuff
regular_send = 0;  // Timer for sending regular updates
regular_send_seconds = 5;  // Delay in seconds


// Debug button (disabled)
button[0] = CreateButton(id, 120, 640-120, "Pos", "getpositions");
button[0].persistent = false;
button[0].visible = false;
buttonListen = "";


// Game
//entitiesInitiatives = ds_grid_create();
entities = ds_list_create();
initiativeIndex = 0;
    // when a new player joins or leaves, this should be recalculated



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (button[0]) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update entities
UpdateEntities(count, player_buffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send player data to ALL attached clients

// send ALL attached clients, ALL Entities and their relevant properties
regular_send += 1;
if (regular_send == regular_send_seconds*room_speed) {
    count = ds_list_size(socketlist);
    if( count&gt;0 )
    {
        UpdateEntities(count, player_buffer);
    }
    show_debug_message("sentregularpacket")
    regular_send = 0;
}    


// Buttons
switch (buttonListen) {
case "getpositions": 
    count = ds_list_size(socketlist);
    for(i=0;i&lt;count;i++) {
        var sock = ds_list_find_value(socketlist,i);
        show_debug_message('Socket: '+ string(sock));
        with (objEntity) {
            show_debug_message(xx);
            show_debug_message(yy);
        }
    }
    buttonListen = "";
    break;
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Server network control
var eventid = ds_map_find_value(async_load, "id");

if( server == eventid ){
    // If the socket ID is the server one, then we have a new 
    /// client connecting, OR an old client disconnecting
    var joined = ConnectDisconnectClient();
    if (joined) {
        if (ds_list_size(socketlist) == 1) {
            // if this is the first player
            /*var current = GetCurrentTurn(Clients, initiativeIndex);
            TurnStart(current);*/
        }
    }
    
}else if( eventid==global.client){
    // Do nothing if this is for our "local" client
}else{
    // All other sockets are connected client sockets, and we have recieved commands from them.
    cmd = ServerRecievedData();
    count = ds_list_size(socketlist);
    if (cmd == MOVE_CMD) UpdateEntities(count, player_buffer);
    if (cmd == NAME_CMD) UpdateEntities(count, player_buffer);
    if (cmd == TURN_CMD) {
        //show_debug_message("Received turn end");
        // turn goes to next player
        //initiativeIndex += 1;
        // give actions to next player
        //var current = ds_list_find_value(Clients, initiativeIndex);//GetCurrentTurn(Clients, initiativeIndex);
        //if (current != 0) TurnStart(current);
        // update players
        UpdateEntities(count, player_buffer);
    }
    if (cmd == ACTION_CMD) UpdateEntities(count, player_buffer);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
